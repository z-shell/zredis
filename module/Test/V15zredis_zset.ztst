# Tests for the zdharma/redis module

%prep

 module_path=( `pwd`/Modules )
 modname1="zdharma/db"
 modname2="zdharma/zredis"
 db1="127.0.0.1:6379/10/myzset"
 db2="127.0.0.1/11/myzset"
 if ! zmodload $modname1 ; then
   ZTST_unimplemented="can't load $modname1 module for testing"
 fi
 if ! zmodload $modname2 ; then
   ZTST_unimplemented="can't load $modname2 module for testing"
 fi
 redis-cli -n 10 flushdb >&| /dev/null || ZTST_unimplemented="local redis database (with free indexes 10 and 11) not accessible"
 redis-cli -n 11 flushdb >&| /dev/null || ZTST_unimplemented="local redis database (with free indexes 10 and 11) not accessible"

%test

 (zmodload -u $modname2 && zmodload $modname2)
0:unload and reload the module without crashing

 ztie -d db/redis -f $db1 -L zset dbase
 dbase[testkey]=1.0
 zuntie dbase
 unset dbase
 ztie -r -d db/redis -f $db1 dbase
 echo $dbase[testkey]
 zuntie -u dbase
 echo $zredis_tied ${#zredis_tied}
0:store key in database 1
>1
>0

 ztie -d db/redis -f $db2 -L zset dbase
 dbase[testkey]=1.0
 zuntie dbase
 unset dbase
 ztie -d db/redis -f $db2 dbase
 echo $dbase[testkey]
 zuntie dbase
 echo $zredis_tied ${#zredis_tied}
0:store key in database 2
>1
>0

 ztie -d db/redis -f $db1 dbase2
 dbase2[testkey2]=2.0
 unset 'dbase2[testkey]'
 zuntie dbase2
 ztie -d db/redis -f $db1 dbase
 echo $dbase[testkey]
 zuntie dbase
 echo $zredis_tied ${#zredis_tied}
0:remove key from database 1 (different variables)
>
>0

 ztie -d db/redis -f $db1 dbase
 dbase[testkey]=1.0
 zuntie dbase
 ztie -d db/redis -f $db1 dbase
 echo $dbase[testkey]
 zuntie dbase
 ztie -d db/redis -f $db1 dbase
 unset 'dbase[testkey]'
 zuntie dbase
 ztie -r -d db/redis -f $db1 dbase
 echo $dbase[testkey]
 zuntie -u dbase
 echo $zredis_tied ${#zredis_tied}
0:store & remove key from database (the same variables)
>1
>
>0

 ztie -d db/redis -f $db1 dbase
 dbase[testkey]=1.0
 dbase[testkey2]=$dbase[testkey]
 dbase[testkey3]=$(( dbase[testkey] + $dbase[testkey2] ))
 zuntie dbase
 ztie -d db/redis -f $db1 dbase
 echo $dbase[testkey]
 echo $dbase[testkey2]
 echo $dbase[testkey3]
 zuntie dbase
 echo $zredis_tied ${#zredis_tied}
0:store 2 keys fetching 1st
>1
>1
>2
>0

 ztie -d db/redis -f $db1 dbase
 val=$dbase[testkey2]
 unset 'dbase[testkey2]'
 echo $val
 echo $dbase[testkey2]
 zuntie dbase
 echo $zredis_tied ${#zredis_tied}
0:unset key that was fetched
>1
>
>0

 ztie -d db/redis -f $db1 dbase
 local -a result
 result=( "${(kv)dbase[@]}" )
 print -rl -- "${(o)result[@]}"
 zuntie dbase
 echo $zredis_tied ${#zredis_tied}
0:scan read-only tied hash, directly assign local -a
>1
>2
>testkey
>testkey3
>0

 ztie -d db/redis -f $db1 dbase
 echo $dbase[testkey]
 dbase=( a 1.0 )
 print -rl -- "${(kv)dbase[@]}"
 zuntie dbase
 echo $zredis_tied ${#zredis_tied}
0:Use scan directly after overwrite of database
>1
>a
>1
>0

 ztie -d db/redis -f $db1 dbase
 dbase=( a 1.0 c 2.0 )
 zuntie dbase
 unset dbase
 ztie -r -d db/redis -f $db1 dbase
 result=( "${(kv)dbase[@]}" )
 print -rl -- "${(o)result[@]}"
 zuntie -u dbase
 echo $zredis_tied ${#zredis_tied}
0:replace hash / database with untie, scan
>1
>2
>a
>c
>0

 ztie -d db/redis -f $db1 dbase
 local -a arr
 arr=( "${dbase[@]}" )
 print -rl -- "${(o)arr[@]}"
 zuntie dbase
 echo $zredis_tied ${#zredis_tied}
0:scan with no (kv)
>1
>2
>0

 ztie -d db/redis -f $db1 dbase
 result=( "${(k)dbase[@]}" )
 print -rl -- "${(o)result[@]}"
 zuntie dbase
 echo $zredis_tied ${#zredis_tied}
0:scan with keys only - (k)
>a
>c
>0

 ztie -d db/redis -f $db1 dbase
 result=( "${(v)dbase[@]}" )
 print -rl -- "${(o)result[@]}"
 zuntie dbase
 echo $zredis_tied ${#zredis_tied}
0:scan with values only, explicit - (v)
>1
>2
>0

 ztie -d db/redis -f ${db1%/*}/1000 dbase 2>/dev/null; ret=$?
 echo $zredis_tied ${#zredis_tied}
 return $ret
1:read-only open non-existent database
>0

 ztie -d db/redis -f $db1 dbase
 dbase=( )
 dbase+=( a 1 )
 echo $dbase[a]
 zuntie dbase
 ztie -d db/redis -f $db1 dbase
 echo $dbase[a]
 result=( "${(kv)dbase[@]}" )
 print -rl -- "${(o)result[@]}"
 zuntie dbase
 ztie -d db/redis -f $db1 dbase
 dbase+=( c 2 )
 echo $dbase[a]
 echo $dbase[c]
 result=( "${(kv)dbase[@]}" )
 print -rl -- "${(o)result[@]}"
 zuntie dbase
 ztie -d db/redis -f $db1 dbase
 echo $dbase[a]
 echo $dbase[c]
 result=( "${(kv)dbase[@]}" )
 print -rl -- "${(o)result[@]}"
 zuntie dbase
0:Append with +=( ), also with existing data, also (kv) scan
>1
>1
>1
>a
>1
>2
>1
>2
>a
>c
>1
>2
>1
>2
>a
>c

 ztie -d db/redis -f $db1 dbase
 echo ${(t)dbase}
 zuntie dbase
0:Type of tied parameter
>association-special

 typeset -ga dbase
 ztie -d db/redis -f $db1 dbase
 echo ${(t)dbase}
 zuntie dbase
0:Type of tied parameter, with preceding unset
>association-special

 local -a dbase
 ztie -d db/redis -f $db1 dbase
 echo ${(t)dbase}
 zuntie dbase
0:Type of tied parameter, with local parameter already existing
>association-local-special

 local -a dbase
 dbase=( fromarray )
 () {
     local -a dbase
     ztie -d db/redis -f $db1 dbase
     echo ${(t)dbase}
 }
 echo $dbase[1]
 ztie -d db/redis -f $db1 dbase
 echo "Can connect:" $dbase[a]
 zuntie dbase
0:Test of automatic untie (use of local scope) and of scoping
>association-local-special
>fromarray
>Can connect: 1

 echo First $zredis_tied ${#zredis_tied}
 ztie -d db/redis -f $db1 dbase
 echo $zredis_tied ${#zredis_tied}
 ztie -d db/redis -f $db2 dbase2
 echo $zredis_tied ${#zredis_tied}
 zuntie dbase
 echo $zredis_tied ${#zredis_tied}
 zuntie dbase2
 echo $zredis_tied ${#zredis_tied}
0:zredis_tied parameter
>First 0
>dbase 1
>dbase dbase2 2
>dbase2 1
>0

 unset zredis_tied 2>/dev/null
1:unset of read-only zgdbm_tied parameter

 ztie -d db/redis -f $db1 dbase
 dbase[漢字]=1
 echo $dbase[漢字]
 zuntie dbase
 ztie -d db/redis -f $db1 dbase
 echo $dbase[漢字]
 zuntie -u dbase
0:Unicode test
>1
>1

 key="ab"$'\0'"ef"
 ztie -d db/redis -f $db1 dbase
 dbase[$key]=1
 echo $dbase[$key]
 zuntie dbase
 ztie -d db/redis -f $db1 dbase
 echo $dbase[$key]
 zuntie dbase
0:Metafication of $'\0'
>1
>1

 ztie -d db/redis -f $db1 dbase
 dbase=( 漢字 1 )
 echo $dbase[漢字]
 zuntie dbase
 ztie -d db/redis -f $db1 dbase
 echo $dbase[漢字]
 zuntie dbase
 key="ab"$'\0'"ef"
 ztie -d db/redis -f $db1 dbase
 dbase+=( $key 1 )
 zuntie dbase
 ztie -d db/redis -f $db1 dbase
 [[ "$dbase[$key]" = "1" ]] && echo correct
 zuntie dbase
0:Unicode & metafication test, different hash access
>1
>1
>correct

 ztie -d db/redis -f $db1 dbase
 dbase=( 漢字 1 )
 zuntie dbase
 ztie -d db/redis -f $db1 dbase
 noglob print -rl ${(kv)dbase[@]}
 zuntie dbase
0:Hash scanning and metafication
>漢字
>1

 ztie -d db/redis -f $db1 dbase
 noglob print -rl ${(okv)dbase[@]}
 zuntie dbase
0:Sorted hash scanning and metafication
>1
>漢字

 ztie -d db/redis -f $db1 dbase
 ztaddress dbase
 [[ $REPLY = "127.0.0.1:6379/10/myzset" ]] && echo correct
 zuntie dbase
 ztie -d db/redis -f $db2 dbase
 ztaddress dbase
 [[ $REPLY = "127.0.0.1/11/myzset" ]] && echo correct
 zuntie dbase
0:ztaddress builtin
>correct
>correct

 ztie -d db/redis -f $db1 dbase
 dbase[testkey]=1
 fun() { while read line; do echo $line; done }
 eval "dbase[testkey]=2" | fun
 echo $dbase[testkey]
 ztclear dbase testkey
 echo $dbase[testkey]
 zuntie dbase
0:Test store in forked Zsh
>1
>2

 ztie -z -d db/redis -f $db1 dbase
 dbase[testkey]=1
 echo $dbase[testkey]
 fun() { while read line; do echo $line; done }
 eval "dbase[testkey]=2" | fun
 echo $dbase[testkey]
 zuntie dbase
0:Test store in forked Zsh, with -z passthrough
>1
>2

 ztie -d db/redis -f $db1 dbase
 echo $dbase[a] $dbase[b] $dbase[c]
 unset dbase
 ztie -r -d db/redis -f $db1 dbase
 echo $dbase[a] $dbase[b] $dbase[c]
 zuntie -u dbase
0:Test references to not-existing elements
>
>

 ztie -r -d db/redis -f $db1 dbase
 zrzset dbase
 print -rl -- "${reply[@]}"
0:Test zrzset
>漢字
>testkey

%clean

 redis-cli -n 10 flushdb
 redis-cli -n 11 flushdb
