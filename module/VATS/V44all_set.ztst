# Tests for the zdharma/redis module

%prep

 module_path=( `pwd`/Modules )
 modname1="zdharma/db"
 modname2="zdharma/zredis"
 db1="127.0.0.1:6379/10/myset"
 db2="127.0.0.1/11/myset"
 if ! zmodload $modname1 ; then
   VATS_unimplemented="can't load $modname1 module for testing"
 fi
 if ! zmodload $modname2 ; then
   VATS_unimplemented="can't load $modname2 module for testing"
 fi
 redis-cli -n 10 flushdb >&| /dev/null || VATS_unimplemented="local redis database (with free indexes 10 and 11) not accessible"
 redis-cli -n 11 flushdb >&| /dev/null || VATS_unimplemented="local redis database (with free indexes 10 and 11) not accessible"
 redis-cli -n 10 sadd myset first 2>/dev/null 1>&2
 redis-cli -n 11 sadd myset first 2>/dev/null 1>&2

%test

 ztie -d db/redis -f $db1 aset
 echo $aset
 aset=( testdata )
 zuntie aset
 ztie -r -d db/redis -f $db1 aset
 echo $aset
 zuntie -u aset
 echo $zredis_tied ${#zredis_tied}
0:store key in database 1
>first
>testdata
>0

 ztie -d db/redis -f $db2 aset
 echo $aset
 aset=( testdata )
 zuntie aset
 unset aset
 ztie -d db/redis -f $db2 aset
 echo $aset
 zuntie aset
 echo $zredis_tied ${#zredis_tied}
0:store key in database 2
>first
>testdata
>0

 ztie -d db/redis -f $db1 -D aset2
 unset 'aset2'
 ztie -d db/redis -f $db1 aset 2>&1
 echo $aset
 echo $zredis_tied ${#zredis_tied}
0:remove key from database 1 (different variables)
>(eval):3: Key doesn't exist: `myset', use -L {type} for lazy binding
>
>0

 ztie -d db/redis -f $db1 -L set aset
 aset=( testdata )
 zuntie aset
 ztie -d db/redis -f $db1 aset
 echo $aset
 zuntie aset
 ztie -d db/redis -f $db1 -D aset
 unset 'aset'
 ztie -r -d db/redis -f $db1 aset 2>&1
 echo $zredis_tied ${#zredis_tied}
0:store & remove key from database (the same variables)
>testdata
>(eval):9: Key doesn't exist: `myset', use -L {type} for lazy binding
>0

 redis-cli -n 10 sadd myset first second 2>/dev/null 1>&2
 redis-cli -n 11 sadd myset first2 second2 2>/dev/null 1>&2
 ztie -d db/redis -f $db1 aset
 ztie -d db/redis -f $db2 aset2
 echo -E "${(oqq@)aset2}"
 aset2=( $aset )
 zuntie aset
 zuntie aset2
 ztie -d db/redis -f $db1 aset
 ztie -d db/redis -f $db2 aset2
 echo -E "${(qqo@)aset}"
 echo -E "${(qqo@)aset2}"
 zuntie aset
 zuntie aset2
 echo $zredis_tied ${#zredis_tied}
0:store a key fetching other key
>'first2' 'second2' 'testdata'
>'first' 'second'
>'first' 'second'
>0

 ztie -d db/redis -f $db2 -D aset2
 val=( $aset2 )
 unset aset2
 echo ${(o)val}
 ztie -d db/redis -f $db2 aset2 2>&1
 echo $zredis_tied ${#zredis_tied}
0:unset key that was fetched
>first second
>(eval):5: Key doesn't exist: `myset', use -L {type} for lazy binding
>0

 ztie -d db/redis -f ${db1%/*}/1000/myset aset 2>/dev/null; ret=$?
 echo $zredis_tied ${#zredis_tied}
 return $ret
1:read-only open non-existent database
>0

 ztie -d db/redis -f $db1 aset
 echo ${(t)aset}
 zuntie aset
0:Type of tied parameter
>array-special

 typeset -g aset
 ztie -d db/redis -f $db1 aset
 echo ${(t)aset}
 zuntie aset
0:Type of tied parameter, with preceding typeset -g
>array-special

 local aset
 ztie -d db/redis -f $db1 aset
 echo ${(t)aset}
 zuntie aset
0:Type of tied parameter, with local parameter already existing
>array-local-special

 local aset
 aset=( from_start )
 () {
     local aset
     ztie -d db/redis -f $db1 aset
     echo ${(t)aset}
 }
 echo $aset
 ztie -d db/redis -f $db1 aset
 echo "Can connect:" ${(o)aset}
 zuntie aset
0:Test of automatic untie (use of local scope) and of scoping
>array-local-special
>from_start
>Can connect: first second

 redis-cli -n 11 sadd myset testdata2 2>/dev/null 1>&2
 echo First $zredis_tied ${#zredis_tied}
 ztie -d db/redis -f $db1 aset
 echo $zredis_tied ${#zredis_tied}
 ztie -d db/redis -f $db2 aset2
 echo $zredis_tied ${#zredis_tied}
 zuntie aset
 echo $zredis_tied ${#zredis_tied}
 zuntie aset2
 echo $zredis_tied ${#zredis_tied}
0:zredis_tied parameter
>First 0
>aset 1
>aset aset2 2
>aset2 1
>0

 unset zredis_tied 2>/dev/null
1:unset of read-only zredis_tied parameter

 ztie -d db/redis -f $db1 aset
 aset=( 漢字 )
 echo $aset
 zuntie aset
 ztie -r -d db/redis -f $db1 aset
 echo $aset
 zuntie -u aset
0:Unicode test
>漢字
>漢字

 val="ab"$'\0'"ef"
 ztie -d db/redis -f $db1 aset
 aset=( $val )
 [[ $aset[1] = "ab"$'\0'"ef" ]] && echo correct
 zuntie aset
 ztie -d db/redis -f $db1 aset
 [[ $aset[1] = "ab"$'\0'"ef" ]] && echo correct
 zuntie aset
0:Metafication of $'\0'
>correct
>correct

 ztie -d db/redis -f $db1 aset
 ztie -d db/redis -f $db2 aset2
 aset=( "漢字" )
 echo $aset
 zuntie aset
 ztie -d db/redis -f $db1 aset
 echo $aset
 zuntie aset
 key="ab"$'\0'"ef"
 aset2=( $key )
 zuntie aset2
 ztie -d db/redis -f $db2 aset2
 [[ "$aset2" = "$key" ]] && echo correct
 zuntie aset2
0:Unicode & metafication test
>漢字
>漢字
>correct

 ztie -d db/redis -f $db1 aset
 ztaddress aset
 [[ $REPLY = "127.0.0.1:6379/10/myset" ]] && echo correct
 zuntie aset
 ztie -d db/redis -f $db2 aset
 ztaddress aset
 [[ $REPLY = "127.0.0.1/11/myset" ]] && echo correct
 zuntie aset
0:ztaddress builtin
>correct
>correct

 ztie -d db/redis -f $db1 aset
 aset=( value1 )
 fun() { while read line; do echo $line; done }
 { eval "aset=( value2 )" | fun } 2>&1
 echo $aset
 ztclear aset
 echo $aset
 zuntie aset
0:Test store in forked Zsh
>(eval):1: Not connected, retrying... Success
>value1
>value2

 ztie -z -d db/redis -f $db1 aset
 aset=( value1 )
 echo $aset
 fun() { while read line; do echo $line; done }
 { eval "aset=( value2 )" | fun } 2>&1
 echo $aset
0:Test store in forked Zsh, with -z passthrough
>value1
>(eval):1: Not connected, retrying... Success
>value2

%clean

 redis-cli -n 10 flushdb
 redis-cli -n 11 flushdb
