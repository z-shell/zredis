##### Makefile.in generated automatically by mkmakemod.sh
##### DO NOT EDIT!

##### ===== DEFINITIONS ===== #####

makefile = Makefile
dir_top = ../..
subdir = Src/zshell

MODOBJS =
MODULES = db.$(DL_EXT) zgdbm.$(DL_EXT)
MDDS    = db.mdd zgdbm.mdd
MDHS    = db.mdh zgdbm.mdh
PROTOS  = proto.db proto.zgdbm
SUBDIRS =

ENTRYOBJ = $(dir_src)/modentry..o
NNTRYOBJ =
ENTRYOPT = -emodentry
NNTRYOPT =

##### ===== INCLUDING Makemod.in.in ===== #####

#
# Makemod.in.in
#
# Copyright (c) 1995-1997 Richard Coleman
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and to distribute modified versions of this software for any
# purpose, provided that the above copyright notice and the following
# two paragraphs appear in all copies of this software.
#
# In no event shall Richard Coleman or the Zsh Development Group be liable
# to any party for direct, indirect, special, incidental, or consequential
# damages arising out of the use of this software and its documentation,
# even if Richard Coleman and the Zsh Development Group have been advised of
# the possibility of such damage.
#
# Richard Coleman and the Zsh Development Group specifically disclaim any
# warranties, including, but not limited to, the implied warranties of
# merchantability and fitness for a particular purpose.  The software
# provided hereunder is on an "as is" basis, and Richard Coleman and the
# Zsh Development Group have no obligation to provide maintenance,
# support, updates, enhancements, or modifications.
#

# ========== OVERRIDABLE VARIABLES ==========

# subdir is done by mkmakemod.sh
# dir_top is done by mkmakemod.sh
# SUBDIRS is done by mkmakemod.sh

@VERSION_MK@

# source/build directories
VPATH           = @srcdir@
sdir            = @srcdir@
sdir_top        = @top_srcdir@
INSTALL         = @INSTALL@

@DEFS_MK@

sdir_src      = $(sdir_top)/Src
dir_src       = $(dir_top)/Src

# ========== COMPILATION RULES ==========

DNCFLAGS =

COMPILE     = $(CC) -c -I. -I$(dir_top)/Src -I$(sdir_top)/Src -I$(sdir_top)/Src/Zle -I$(sdir) $(CPPFLAGS) $(DEFS) $(CFLAGS) $(D@L@CFLAGS)
DLCOMPILE   = $(CC) -c -I. -I$(dir_top)/Src -I$(sdir_top)/Src -I$(sdir_top)/Src/Zle -I$(sdir) $(CPPFLAGS) $(DEFS) -DMODULE $(CFLAGS) $(DLCFLAGS)
LINK        = $(CC) $(LDFLAGS) $(EXELDFLAGS) $(EXTRA_LDFLAGS) -o $@
DLLINK      = $(DLLD) $(LDFLAGS) $(LIBLDFLAGS) $(DLLDFLAGS) -o $@

KNR_OBJ=.o
KNROBJ=._foo_

ANSIOBJ=.o
ANSI_OBJ=._foo_

.SUFFIXES: .c .$(DL_EXT) ..o .._foo_ .o ._foo_ .syms .pro .epro

.c$(ANSI@U@OBJ):
	$(COMPILE) -o $@ $<
	@rm -f $(dir_src)/stamp-modobjs

.c$(KNR@U@OBJ):
	@ANSI2KNR@ $< > $@.c
	$(COMPILE) -o $@ $@.c
	rm -f $@.c
	@rm -f $(dir_src)/stamp-modobjs

.c.$(ANSI@U@OBJ):
	$(DLCOMPILE) -o $@ $<

.c.$(KNR@U@OBJ):
	@ANSI2KNR@ $< > $@.c
	$(DLCOMPILE) -o $@ $@.c
	rm -f $@.c

.c.syms:
	$(AWK) -f $(sdir_src)/makepro.awk $< $(subdir) > $@

.syms.epro:
	(echo '/* Generated automatically */'; sed -n '/^E/{s/^E//;p;}' < $<) \
		> $@
	(echo '/* Generated automatically */'; sed -n '/^L/{s/^L//;p;}' < $<) \
		> `echo $@ | sed 's/\.epro$$/.pro/'`

PROTODEPS = $(sdir_src)/makepro.awk

# ========== DEPENDENCIES FOR BUILDING ==========

all: modobjs modules
.PHONY: all

modobjs: $(MODOBJS)
modules: $(MODULES)
headers: $(MDHS)
proto: $(PROTOS)
.PHONY: modobjs modules headers proto

prep:
	@case $(sdir_top) in \
	    /*) top_srcdir=$(sdir_top) ;; \
	    *) top_srcdir=$(subdir)/$(sdir_top) ;; \
	esac; \
	export top_srcdir; \
	cd $(dir_top) || exit 1; \
	subdirs='$(SUBDIRS)'; \
	for subdir in $$subdirs; do \
	    dir=$(subdir)/$$subdir; \
	    test -d $$dir || mkdir $$dir; \
	    $(SHELL) $$top_srcdir/Src/mkmakemod.sh $$dir Makefile || exit 1; \
	    ( cd $$dir && $(MAKE) $(MAKEDEFS) $@ ) || exit 1; \
	done
.PHONY: prep

headers: $(dir_src)/modules.stamp
$(dir_src)/modules.stamp: $(MDDS)
	$(MAKE) -f $(makefile) $(MAKEDEFS) prep
	echo 'timestamp for *.mdd files' > $@
.PHONY: headers

FORCE:
.PHONY: FORCE

# ========== DEPENDENCIES FOR INSTALLING ==========

install: install.bin install.modules
uninstall: uninstall.bin uninstall.modules
.PHONY: install uninstall

install.bin: install.bin-here
uninstall.bin: uninstall.bin-here
install.modules: install.modules-here
uninstall.modules: uninstall.modules-here
.PHONY: install.bin uninstall.bin install.modules uninstall.modules

install.bin-here uninstall.bin-here:
install.modules-here uninstall.modules-here:
.PHONY: install.bin-here install.modules-here

# ========== DEPENDENCIES FOR CLEANUP ==========

@CLEAN_MK@

mostlyclean-here:
	rm -f *.o *.export *.$(DL_EXT)
.PHONY: mostlyclean-here

clean-here:
	rm -f *.o.c *.syms *.pro *.epro *.mdh *.mdhi *.mdhs *.mdh.tmp
.PHONY: clean-here

distclean-here:
	rm -f $(makefile) $(makefile).in
.PHONY: distclean-here

# ========== RECURSIVE MAKES ==========

install.bin uninstall.bin install.modules uninstall.modules \
modobjs modules headers proto:
	@subdirs='$(SUBDIRS)'; for subdir in $$subdirs; do \
	  ( cd $$subdir && $(MAKE) $(MAKEDEFS) $@ ) || exit 1; \
	done

# ========== DEPENDENCIES FOR MAINTENANCE ==========

$(makefile): $(makefile).in $(dir_top)/config.status
	@case $(sdir_top) in \
	    /*) top_srcdir=$(sdir_top) ;; \
	    *) top_srcdir=$(subdir)/$(sdir_top) ;; \
	esac; \
	export top_srcdir; \
	echo 'cd $(dir_top) && $(SHELL)' \
	    '$$top_srcdir/Src/mkmakemod.sh -m $(subdir) $(makefile)'; \
	cd $(dir_top) && \
	    $(SHELL) $$top_srcdir/Src/mkmakemod.sh -m $(subdir) $(makefile)

$(makefile).in: $(sdir_src)/mkmakemod.sh $(sdir_src)/Makemod.in.in $(MDDS) \
	$(dir_top)/config.modules
	@case $(sdir_top) in \
	    /*) top_srcdir=$(sdir_top) ;; \
	    *) top_srcdir=$(subdir)/$(sdir_top) ;; \
	esac; \
	export top_srcdir; \
	echo 'cd $(dir_top) && $(SHELL)' \
	    '$$top_srcdir/Src/mkmakemod.sh -i $(subdir) $(makefile)'; \
	cd $(dir_top) && \
	    $(SHELL) $$top_srcdir/Src/mkmakemod.sh -i $(subdir) $(makefile)

##### ===== DEPENDENCIES GENERATED FROM db.mdd ===== #####

MODOBJS_db = db.o
MODDOBJS_db = db..o  $(@E@NTRYOBJ)
SYMS_db = db.syms 
EPRO_db = db.epro
INCS_db = $(EPRO_db) 
EXPIMP_db =  $(IMPOPT)$(dir_top)/Src/zsh.export $(EXPOPT)db.export
NXPIMP_db =
LINKMODS_db =  $(dir_top)/Src/libzsh-$(VERSION).$(DL_EXT) 
NOLINKMODS_db = 

proto.db: $(EPRO_db)
$(SYMS_db): $(PROTODEPS)

db.export: $(SYMS_db)
	@( echo '#!'; cat $(SYMS_db) | sed -n '/^X/{s/^X//;p;}' | sort -u ) > $@

modobjs.db: $(MODOBJS_db)
	@echo '' $(MODOBJS_db) | sed 's" " zshell/"g' >> $(dir_src)/stamp-modobjs.tmp

install.modules-here: install.modules.db
uninstall.modules-here: uninstall.modules.db

install.modules.db: db.$(DL_EXT)
	$(SHELL) $(sdir_top)/mkinstalldirs $(DESTDIR)$(MODDIR)/zshell
	$(INSTALL_PROGRAM) $(STRIPFLAGS) db.$(DL_EXT) $(DESTDIR)$(MODDIR)/zshell/db.$(DL_EXT)

uninstall.modules.db:
	rm -f $(DESTDIR)$(MODDIR)/zshell/db.$(DL_EXT)

db.$(DL_EXT): $(MODDOBJS_db) db.export  $(dir_top)/Src/zsh.export $(@LINKMODS@_db)
	rm -f $@
	$(DLLINK) $(@E@XPIMP_db) $(@E@NTRYOPT) $(MODDOBJS_db) $(@LINKMODS@_db) $(LIBS) 

db.mdhi: db.mdhs $(INCS_db)
	@test -f $@ || echo 'do not delete this file' > $@

db.mdhs: db.mdd
	@$(MAKE) -f $(makefile) $(MAKEDEFS) db.mdh.tmp
	@if cmp -s db.mdh db.mdh.tmp; then \
	    rm -f db.mdh.tmp; \
	    echo "\`db.mdh' is up to date."; \
	else \
	    mv -f db.mdh.tmp db.mdh; \
	    echo "Updated \`db.mdh'."; \
	fi
	echo 'timestamp for db.mdh against db.mdd' > $@

db.mdh:  $(dir_top)/Src/zsh.mdh   db.mdhi
	@$(MAKE) -f $(makefile) $(MAKEDEFS) db.mdh.tmp
	@mv -f db.mdh.tmp db.mdh
	@echo "Updated \`db.mdh'."

db.mdh.tmp:
	@( \
	    echo '#ifndef have_zshellQsdb_module'; \
	    echo '#define have_zshellQsdb_module'; \
	    echo; \
	    echo '# ifndef IMPORTING_MODULE_zshellQsdb'; \
	    if test @SHORTBOOTNAMES@ = yes; then \
		echo '#  ifndef MODULE'; \
	    fi; \
	    echo '#   define boot_ boot_zshellQsdb'; \
	    echo '#   define cleanup_ cleanup_zshellQsdb'; \
	    echo '#   define features_ features_zshellQsdb'; \
	    echo '#   define enables_ enables_zshellQsdb'; \
	    echo '#   define setup_ setup_zshellQsdb'; \
	    echo '#   define finish_ finish_zshellQsdb'; \
	    if test @SHORTBOOTNAMES@ = yes; then \
		echo '#  endif /* !MODULE */'; \
	    fi; \
	    echo '# endif /* !IMPORTING_MODULE_zshellQsdb */'; \
	    echo; \
	    echo '/* Module dependencies */'; \
	    echo '# define IMPORTING_MODULE_zshQsmain 1'; \
	    echo '# include "$(dir_top)/Src/zsh.mdh"'; \
	    echo; \
	    echo '# undef mod_import_variable'; \
	    echo '# undef mod_import_function'; \
	    echo '# if defined(IMPORTING_MODULE_zshellQsdb) &&  defined(MODULE)'; \
	    echo '#  define mod_import_variable @MOD_IMPORT_VARIABLE@'; \
	    echo '#  define mod_import_function @MOD_IMPORT_FUNCTION@'; \
	    echo '# else'; \
	    echo '#  define mod_import_function'; \
	    echo '#  define mod_import_variable'; \
	    echo '# endif /* IMPORTING_MODULE_zshellQsdb && MODULE */'; \
	    for epro in $(EPRO_db); do \
		echo '# include "'$$epro'"'; \
	    done; \
	    echo '# undef mod_import_variable'; \
	    echo '# define mod_import_variable'; \
	    echo '# undef mod_import_variable'; \
	    echo '# define mod_import_variable'; \
	    echo '# ifndef mod_export'; \
	    echo '#  define mod_export @MOD_EXPORT@'; \
	    echo '# endif /* mod_export */'; \
	    echo; \
	    echo '#endif /* !have_zshellQsdb_module */'; \
	) > $@

$(MODOBJS_db) $(MODDOBJS_db): db.mdh

##### ===== DEPENDENCIES GENERATED FROM zgdbm.mdd ===== #####

MODOBJS_zgdbm = zgdbm.o
MODDOBJS_zgdbm = zgdbm..o  $(@E@NTRYOBJ)
SYMS_zgdbm = zgdbm.syms 
EPRO_zgdbm = zgdbm.epro
INCS_zgdbm = $(EPRO_zgdbm) 
EXPIMP_zgdbm =  $(IMPOPT)$(dir_top)/Src/zsh.export $(EXPOPT)zgdbm.export
NXPIMP_zgdbm =
LINKMODS_zgdbm =  $(dir_top)/Src/libzsh-$(VERSION).$(DL_EXT) 
NOLINKMODS_zgdbm = 

proto.zgdbm: $(EPRO_zgdbm)
$(SYMS_zgdbm): $(PROTODEPS)

zgdbm.export: $(SYMS_zgdbm)
	@( echo '#!'; cat $(SYMS_zgdbm) | sed -n '/^X/{s/^X//;p;}' | sort -u ) > $@

modobjs.zgdbm: $(MODOBJS_zgdbm)
	@echo '' $(MODOBJS_zgdbm) | sed 's" " zshell/"g' >> $(dir_src)/stamp-modobjs.tmp

install.modules-here: install.modules.zgdbm
uninstall.modules-here: uninstall.modules.zgdbm

install.modules.zgdbm: zgdbm.$(DL_EXT)
	$(SHELL) $(sdir_top)/mkinstalldirs $(DESTDIR)$(MODDIR)/zshell
	$(INSTALL_PROGRAM) $(STRIPFLAGS) zgdbm.$(DL_EXT) $(DESTDIR)$(MODDIR)/zshell/zgdbm.$(DL_EXT)

uninstall.modules.zgdbm:
	rm -f $(DESTDIR)$(MODDIR)/zshell/zgdbm.$(DL_EXT)

zgdbm.$(DL_EXT): $(MODDOBJS_zgdbm) zgdbm.export  $(dir_top)/Src/zsh.export $(@LINKMODS@_zgdbm)
	rm -f $@
	$(DLLINK) $(@E@XPIMP_zgdbm) $(@E@NTRYOPT) $(MODDOBJS_zgdbm) $(@LINKMODS@_zgdbm) $(LIBS) 

zgdbm.mdhi: zgdbm.mdhs $(INCS_zgdbm)
	@test -f $@ || echo 'do not delete this file' > $@

zgdbm.mdhs: zgdbm.mdd
	@$(MAKE) -f $(makefile) $(MAKEDEFS) zgdbm.mdh.tmp
	@if cmp -s zgdbm.mdh zgdbm.mdh.tmp; then \
	    rm -f zgdbm.mdh.tmp; \
	    echo "\`zgdbm.mdh' is up to date."; \
	else \
	    mv -f zgdbm.mdh.tmp zgdbm.mdh; \
	    echo "Updated \`zgdbm.mdh'."; \
	fi
	echo 'timestamp for zgdbm.mdh against zgdbm.mdd' > $@

zgdbm.mdh:  $(dir_top)/Src/zsh.mdh   zgdbm.mdhi
	@$(MAKE) -f $(makefile) $(MAKEDEFS) zgdbm.mdh.tmp
	@mv -f zgdbm.mdh.tmp zgdbm.mdh
	@echo "Updated \`zgdbm.mdh'."

zgdbm.mdh.tmp:
	@( \
	    echo '#ifndef have_zshellQszgdbm_module'; \
	    echo '#define have_zshellQszgdbm_module'; \
	    echo; \
	    echo '# ifndef IMPORTING_MODULE_zshellQszgdbm'; \
	    if test @SHORTBOOTNAMES@ = yes; then \
		echo '#  ifndef MODULE'; \
	    fi; \
	    echo '#   define boot_ boot_zshellQszgdbm'; \
	    echo '#   define cleanup_ cleanup_zshellQszgdbm'; \
	    echo '#   define features_ features_zshellQszgdbm'; \
	    echo '#   define enables_ enables_zshellQszgdbm'; \
	    echo '#   define setup_ setup_zshellQszgdbm'; \
	    echo '#   define finish_ finish_zshellQszgdbm'; \
	    if test @SHORTBOOTNAMES@ = yes; then \
		echo '#  endif /* !MODULE */'; \
	    fi; \
	    echo '# endif /* !IMPORTING_MODULE_zshellQszgdbm */'; \
	    echo; \
	    echo '/* Module dependencies */'; \
	    echo '# define IMPORTING_MODULE_zshQsmain 1'; \
	    echo '# include "$(dir_top)/Src/zsh.mdh"'; \
	    echo; \
	    echo '# undef mod_import_variable'; \
	    echo '# undef mod_import_function'; \
	    echo '# if defined(IMPORTING_MODULE_zshellQszgdbm) &&  defined(MODULE)'; \
	    echo '#  define mod_import_variable @MOD_IMPORT_VARIABLE@'; \
	    echo '#  define mod_import_function @MOD_IMPORT_FUNCTION@'; \
	    echo '# else'; \
	    echo '#  define mod_import_function'; \
	    echo '#  define mod_import_variable'; \
	    echo '# endif /* IMPORTING_MODULE_zshellQszgdbm && MODULE */'; \
	    for epro in $(EPRO_zgdbm); do \
		echo '# include "'$$epro'"'; \
	    done; \
	    echo '# undef mod_import_variable'; \
	    echo '# define mod_import_variable'; \
	    echo '# undef mod_import_variable'; \
	    echo '# define mod_import_variable'; \
	    echo '# ifndef mod_export'; \
	    echo '#  define mod_export @MOD_EXPORT@'; \
	    echo '# endif /* mod_export */'; \
	    echo; \
	    echo '#endif /* !have_zshellQszgdbm_module */'; \
	) > $@

$(MODOBJS_zgdbm) $(MODDOBJS_zgdbm): zgdbm.mdh

##### ===== DEPENDENCIES FOR REMOTE MODULES ===== #####

$(dir_top)/Src/zsh.mdh:
	false # A. should only happen with make -n

$(dir_top)/Src/zsh.export:
	false # B. should only happen with make -n

$(dir_top)/Src/libzsh-$(VERSION).$(DL_EXT) :
	false # C. should only happen with make -n

##### End of Makefile.in
